@inject Microsoft.Extensions.Localization.IStringLocalizer<NavMenu> _localizer
@using System.Security.Claims
@using Microsoft.AspNetCore.SignalR.Client
@using SchoolV01.Shared.Constants.Application
@using SchoolV01.Shared.Constants.Role
@using SchoolV01.Shared.ViewModels.Blocks;
@using SchoolV01.Shared.ViewModels.Menus
@using SchoolV01.Shared.Wrapper;

@* <UserCard />
<MudDivider Class="my-2" Style="flex-grow: inherit;" /> *@
<MudNavMenu Bordered="true">
    <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Outlined.Home">@_localizer["Home"]</MudNavLink>



    <AuthorizeView Policy="@Permissions.WebSiteManagement.View" Context="auth">
        <MudNavGroup Title="@_localizer["WebSite Management"]" Icon="@Icons.Material.Filled.KeyboardArrowDown">
            <MudNavGroup Title="@_localizer["Blocks Management"]">
                <AuthorizeView Roles="@RoleConstants.AdministratorRole">
                    <MudNavLink Href="/block-categories">@_localizer["Block Categories List"]</MudNavLink>
                </AuthorizeView>
                <MudNavGroup Title="@_localizer["Blocks List"]" Expanded="true">
                    @foreach (var item in blockCategories)
                    {
                        <MudNavLink Href="@($"/blocks/{@item.Id}")">
                            @if (System.Globalization.CultureInfo.CurrentCulture.Name == "en-US")
                            {
                                @item.NameEn
                            }
                            else
                            {
                                @item.NameAr
                            }
                        </MudNavLink>
                    }
                </MudNavGroup>
            </MudNavGroup>

            <MudNavGroup Title="@_localizer["Menus Management"]">
                <AuthorizeView Roles="@RoleConstants.AdministratorRole">
                    <MudNavLink Href="/menu-categories">@_localizer["Add Menu Categories"]</MudNavLink>
                </AuthorizeView>
                <MudNavGroup Title="@_localizer["Menu Categories"]" Expanded="true">
                    @foreach (var item in categories)
                    {
                        <MudNavLink Href="@($"/menus/{@item.Id}")">
                            @if (System.Globalization.CultureInfo.CurrentCulture.Name == "en-US")
                            {
                                @item.NameEn
                            }
                            else
                            {
                                @item.NameAr
                            }
                        </MudNavLink>
                    }
                </MudNavGroup>
            </MudNavGroup>

            <MudNavGroup Title="@_localizer["Pages Management"]">
                <MudNavLink Href="/pages">@_localizer["Pages"]</MudNavLink>
            </MudNavGroup>
        </MudNavGroup>
    </AuthorizeView>

    @if (_canViewCountrys || _canViewCities)
    {
        <MudNavGroup Title="@_localizer["GeneralSettings"]" Icon="@Icons.Material.Filled.Settings">
            @if (_canViewCountrys)
            {
                <MudNavLink Href="/General-Settings/Countries" Match="NavLinkMatch.Prefix">
                    @_localizer["Countries"]
                </MudNavLink>
            }

            @if (_canViewCities)
            {
                <MudNavLink Href="/General-Settings/Cities" Match="NavLinkMatch.Prefix">
                    @_localizer["Cities"]
                </MudNavLink>
            }
            @if (_canViewClassifications)
            {
                <MudNavLink Href="/General-Settings/Classifications" Match="NavLinkMatch.Prefix">
                    @_localizer["Classifications"]
                </MudNavLink>
            }
            @if (_canViewCourseTypes)
            {
                <MudNavLink Href="/General-Settings/CourseTypes" Match="NavLinkMatch.Prefix">
                    @_localizer["CourseTypes"]
                </MudNavLink>
            }
   
       

        </MudNavGroup>
    }
    
      @if (_canViewPersons || _canViewCompanies)
        {
         
            <MudNavGroup Title="@_localizer["Clients Management"]" Icon="@Icons.Material.Outlined.People">
                @if (_canViewPersons)
                {
                    <MudNavLink Href="/individuals">
                        @_localizer["Individuals"]
                    </MudNavLink>
                }

            @if (_canViewCompanies)
            {
                <MudNavLink Href="/companies" Match="NavLinkMatch.All">
                    @_localizer["Companies"]
                </MudNavLink>
            }
        </MudNavGroup>
            
        }    

      @if (_canViewOrders)
        {
         
            <MudNavGroup Title="@_localizer["Orders Management"]" Icon="@Icons.Material.Outlined.People">

            <MudNavLink Href="/CourseOrders">
                        @_localizer["Courses Orders"]
                    </MudNavLink>

            <MudNavLink Href="/ProductOrders">
                @_localizer["Services Orders"]
                    </MudNavLink>
              

          
          
        </MudNavGroup>
            
        }
 



    @if (_canViewProducts || _canViewProductCategories)
    {
        <MudNavGroup Title="@_localizer["Services Management"]" Icon="@Icons.Material.Outlined.RoomService">
            @if (_canViewProductCategories)
            {

                <MudNavLink Href="/general-settings/Product-Categories/0" Icon="@Icons.Material.Outlined.DesignServices">
                    @_localizer["Services Categories"]
                </MudNavLink>
            }
            @if (_canViewProducts)
            {
                <MudNavLink Href="/products" Icon="@Icons.Material.Outlined.CleaningServices">
                    @_localizer["Services List"]
                </MudNavLink>
            }

        </MudNavGroup>
    }
 
    @if (_canViewCourses || _canViewCourseCategories)
    {
        <MudNavGroup Title="@_localizer["Courses Management"]" Icon="@Icons.Material.Outlined.RoomService">
            @if (_canViewCourseCategories)
            {

                <MudNavLink Href="/general-settings/Course-Categories/0" Icon="@Icons.Material.Outlined.DesignServices">
                    @_localizer["Courses Categories"]
                </MudNavLink>
            }
            @if (_canViewCourses)
            {
                <MudNavLink Href="/Courses" Icon="@Icons.Material.Outlined.CleaningServices">
                    @_localizer["Courses List"]
                </MudNavLink>
            }

        </MudNavGroup>
    }
 

    @if (_isAdmin)
    {
        <MudNavGroup Title="@_localizer["Administrator"]" Icon="@Icons.Material.Outlined.Person">
            @*<MudListSubheader Class="mt-2 mb-n2">@_localizer["Administrator"]</MudListSubheader>*@
            @if (_canViewUsers)
            {
                <MudNavLink Href="/identity/users" Match="NavLinkMatch.Prefix">
                    @_localizer["Users"]
                </MudNavLink>
            }
            @if (_canViewRoles)
            {
                <MudNavLink Href="/identity/roles" Match="NavLinkMatch.Prefix">
                    @_localizer["Roles"]
                </MudNavLink>
            }

        </MudNavGroup>

    }

    @if (_canViewSuggestions)
    {
        <MudNavLink Href="/Suggestions" Icon="@Icons.Material.Outlined.SettingsSuggest">
            @_localizer["Complaints and Suggestions"]
    </MudNavLink>
    }
    @if (_isAdmin)
    {

        <MudNavLink Href="/swagger/index.html" Target="_blank" Icon="@Icons.Material.Outlined.LiveHelp">
            @_localizer["Swagger"]
        </MudNavLink>

    }

@*     <MudNavLink Href="/chat"  Icon="@Icons.Material.Outlined.LiveHelp">
        @_localizer["Chat"]
    </MudNavLink> *@
@*     <MudNavLink Href="/R"  Icon="@Icons.Material.Outlined.LiveHelp">
        @_localizer["R"]
    </MudNavLink>  <MudNavLink Href="/tracking"  Icon="@Icons.Material.Outlined.LiveHelp">
        @_localizer["tracking"]
    </MudNavLink> *@

</MudNavMenu>

@code {
    [CascadingParameter] private HubConnection HubConnection { get; set; }

    private ClaimsPrincipal _authenticationStateProviderUser;

    private MenuViewModel Border;

    private bool _canViewHangfire;
    private bool _canViewDashboards;
    private bool _canViewMatchTable;
    private bool _canViewDocuments;
    private bool _canViewDocumentTypes;
    private bool _canViewAuditTrails;
    private bool _canViewRoles;
    private bool _canViewUsers;
    private bool _canViewChat;
    private bool _canViewProducts;
    private bool _canViewProductCategories;
    private bool _canViewCities;
    private bool _canViewCountrys;
    private bool _canViewCompanies;
    private bool _canViewPersons;
    private bool _canViewClassifications;
    private bool _canViewCourseTypes;
    private bool _canViewSuggestions;
    private bool _canViewCourses;
    private bool _canViewCourseCategories;
    private bool _canViewOrders;
    @*/*s0012s*/*@
    private bool _canViewOwners;

    private bool _canViewWebSiteManagement;

    private bool _isAdmin;

    private ClaimsPrincipal _currentUser;

    protected override async Task OnParametersSetAsync()
    {
        _authenticationStateProviderUser = await _stateProvider.GetAuthenticationStateProviderUserAsync();
        _canViewHangfire = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Hangfire.View)).Succeeded;
        _canViewDashboards = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Dashboards.View)).Succeeded;
        _canViewDocuments = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Documents.View)).Succeeded;
        _canViewDocumentTypes = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.DocumentTypes.View)).Succeeded;
        _canViewAuditTrails = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.AuditTrails.View)).Succeeded;
        _canViewRoles = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Roles.View)).Succeeded;
        _canViewUsers = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Users.View)).Succeeded;
        _canViewChat = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Communication.Chat)).Succeeded;
        _canViewProducts = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Products.View)).Succeeded;
        _canViewProductCategories = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.ProductCategories.View)).Succeeded;
        _canViewWebSiteManagement = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.WebSiteManagement.View)).Succeeded;
        _canViewCities = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Cities.View)).Succeeded;
        _canViewCountrys = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Countries.View)).Succeeded;
        _canViewPersons = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Person.View)).Succeeded;
        _canViewCompanies = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Companies.View)).Succeeded;
        _canViewClassifications = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Classifications.View)).Succeeded;
        _canViewCourseTypes = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.CourseTypes.View)).Succeeded;
        _canViewSuggestions = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Suggestions.View)).Succeeded;
        _canViewCourseCategories = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.CourseCategories.View)).Succeeded;
        _canViewCourses = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Courses.View)).Succeeded;
        _canViewOrders = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Orders.View)).Succeeded;
        

        _currentUser = await _authenticationManager.CurrentUser();
        _isAdmin = _currentUser.IsInRole("Administrator");


    }
    private IEnumerable<BlockCategoryViewModel> blockCategories = [];
    private IEnumerable<MenuCategoryViewModel> categories = [];

    protected async override Task OnInitializedAsync()
    {
        await Task.WhenAll(LoadBlockCategories());
        try
        {
            await LoadMenuCategories();
        }
        catch
        {
            _snackBar.Add("Error Loading Categories!");
        }

        HubConnection = new HubConnectionBuilder()
            .WithUrl(_navigationManager.ToAbsoluteUri(ApplicationConstants.SignalR.HubUrl))
            .Build();
        HubConnection.On(ApplicationConstants.SignalR.ReceiveUpdateDashboard, async () =>
        {
            _snackBar.Add("Menu Changed");
            try
            {
                await LoadMenuCategories();
            }
            catch
            {
                _snackBar.Add("Error Loading Categories!");
            }
            StateHasChanged();
        });
        await HubConnection.StartAsync();

    }

    private async Task LoadMenuCategories()
    {
        var response = await _httpClient.GetFromJsonAsync<IEnumerable<MenuCategoryViewModel>>(EndPoints.MenuCategoriesSelect);
        if (response != null)
        {
            categories = response;
        }
        else
        {
            _snackBar.Add("Error retrieving data");
        }
    }
    private async Task LoadBlockCategories()
    {
        var response = await _httpClient.GetFromJsonAsync<IEnumerable<BlockCategoryViewModel>>(EndPoints.BlockCategoriesSelect);
        if (response != null)
        {
            blockCategories = response;
        }
        else
        {
            _snackBar.Add("Error retrieving data");
        }
    }

}