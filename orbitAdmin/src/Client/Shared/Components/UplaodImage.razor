@using SchoolV01.Application.Enums;
@using SchoolV01.Application.Requests;
@using System.IO;
@using System.Linq.Expressions;
@inject Microsoft.Extensions.Localization.IStringLocalizer<UplaodImage> _localizer

<MudText Typo="Typo.h6">
    <MudIcon Icon="@Icons.Material.Filled.Image" Class="mr-3 mb-n1" />
    <b> @_localizer[Label]</b>
</MudText>
<MudItem>
    @if (!string.IsNullOrEmpty(Image))
    {
        <MudImage Src="@(Image)" ObjectFit="ObjectFit.Contain" Style="width: 100%;" Height="200"></MudImage>
    }
    else
    {
        <div style="color:azure;width:100%;height:200px;"></div>
    }
</MudItem>
<MudItem>
    <InputFile id="@Id" hidden OnChange="UploadFiles" />
    @if (isMaxSize)
    {
        <MudAlert Severity="Severity.Error">@AlertMessage  <strong>@MaxFileSize MB</strong></MudAlert>
    }
    <div>
        <MudButton HtmlTag="label" Disabled="Disabled" Variant="Variant.Text" Color="Color.Primary" Size="Size.Small" StartIcon="@Icons.Material.Filled.CloudUpload" for="@Id">
            @_localizer["Upload"]
        </MudButton>
        @if (!string.IsNullOrEmpty(Image))
        {
            <MudButton Variant="Variant.Text" Color="Color.Info" StartIcon="@Icons.Material.Filled.RemoveRedEye" Size="Size.Small" Href="@(Image)" Target="_blank">
                @_localizer["View"]
            </MudButton>
            <MudButton Variant="Variant.Text" Disabled="Disabled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="DeleteAsync">
                @_localizer["Delete"]
            </MudButton>
        }
    </div>
</MudItem>

@code
{
    [Parameter] public string Image { get; set; }
    [Parameter] public UploadRequest UploadRequest { get; set; }

    [Parameter] public string Id { get; set; } = $"file{new Random().Next(0,999):D4}";
    [Parameter] public string Label { get; set; } = "Photo";
    [Parameter] public UploadType UploadType { get; set; } = UploadType.Document;
    [Parameter] public long MaxFileSize { get; set; } = 10;
    [Parameter] public List<string> Types { get; set; } = new();
    [Parameter] public bool Disabled { get; set; } = false;


    [Parameter] public EventCallback<UploadRequest> UploadRequestChanged { get; set; }
    [Parameter] public EventCallback<string> ImageChanged { get; set; }

    private long maxFileSize
    {
        get { return MaxFileSize * 1024 * 1024; }
        set { value = maxFileSize; }
    }

    public bool isMaxSize = false;


    MarkupString AlertMessage = new MarkupString($"File size exceeds the limit. Maximum allowed size is");

    private async Task DeleteAsync()
    {
        await ImageChanged.InvokeAsync(null);
        await UploadRequestChanged.InvokeAsync(new UploadRequest());
    }

    private IBrowserFile _file;

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        _file = e.File;
        if (_file != null)
        {
            if (_file.Size > maxFileSize)
            {
                isMaxSize = true;
                return;
            }
            isMaxSize = false;

            var extension = Path.GetExtension(_file.Name);
            var format = "image/png";
            //  var imageFile = await e.File.RequestImageFileAsync(format, 400, 400);
            var buffer = new byte[_file.Size];
            await _file.OpenReadStream(maxFileSize).ReadAsync(buffer);
            await ImageChanged.InvokeAsync($"data:{format};base64,{Convert.ToBase64String(buffer)}");
            await UploadRequestChanged.InvokeAsync(new UploadRequest { Data = buffer, UploadType = UploadType, Extension = extension });
        }
    }

}